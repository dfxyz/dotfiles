# helper functions {
__sshh_list=~/.ssh/sshh_list

function __sshh_usage() {
    echo 'usage: sshh [-e | ENTRY_NUMBER]'
}

function __sshh_load() {
    __sshh_entries=($(cat $__sshh_list 2> /dev/null))
    if [[ ${#__sshh_entries[@]} -eq 0 ]]; then
        echo 'sshh: no saved entry.'
        return 1
    fi
    return 0
}

function __sshh_print() {
    local size=${#__sshh_entries[@]}
    for (( i=0; i<$size; i++ )); do
        echo "[$i] ${__sshh_entries[$i]}"
    done
}

function __sshh_get() {
    local entry=${__sshh_entries[$1]}
    if [[ -z $entry ]]; then
        echo "sshh: invalid entry number '$1'."
        return 1
    fi
    __sshh_entry=($(sed 's/:/ /g' <<< $entry))
    if [[ ${#__sshh_entry[@]} -gt 2 ]]; then
        echo "sshh: invalid entry '$entry' ($1)."
        return 1
    fi
    return 0
}

function __sshh_connect() {
    if [[ -n ${__sshh_entry[1]} ]]; then
        eval "ssh -p ${__sshh_entry[1]} ${__sshh_entry[0]}"
    else
        eval "ssh ${__sshh_entry[0]}"
    fi
}

function sshh() {
    if [[ -z $1 ]]; then
        __sshh_load || return $?
        __sshh_print
        return 0
    fi

    if [[ $1 == "-e" ]]; then
        $EDITOR $__sshh_list
        return $?
    fi

    if [[ $1 =~ ^[0-9]*$ ]]; then
        __sshh_load || return $?
        __sshh_get $1 || return $?
        __sshh_connect
        return 0
    fi

    __sshh_usage
}

# vim: ft=sh fdm=marker fmr={,}
